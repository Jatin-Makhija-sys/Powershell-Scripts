Function Create-M365GroupwithSPOSite { 
[cmdletBinding()] 
    param( 
    [parameter(mandatory = $true, Position =0, HelpMessage="Please Enter the Path to CSV File")] 
    [string]${CSVFilePath} 
         ) 
 
Try { 
 
        #Check for PNP Powershell module 
        $Module=Get-Module -Name pnp.powershell -ListAvailable  
        if($Module.count -eq 0) 
        { 
        Write-Host PNP Powershell module is not available  -ForegroundColor yellow  
        $Confirm= Read-Host Are you sure you want to install module? [Y] Yes [N] No 
        if($Confirm -match "[yY]") 
        { 
        Write-Host "Installing PnP.Powershell Module"
        Install-Module -Name PnP.PowerShell -Confirm:$False -Force
        Write-Host "Importing PnP.Powershell Module"
        Import-Module -Name PnP.PowerShell -Verbose:$false
        } 
        else 
        { 
        Write-Host PNP Powershell module is required for this script to work. 
        Exit
        }
        }         
 
    } 
 
Catch { 
Write-Warning "PNP Powershell module is required for this script to work." 
Write-Warning $_ 
break 
} 

$arrayOfOwners = "jmakhija@techpress.net", "tstark@techpress.net"
$arrayOfMembers = "jondoe@techpress.net"

$ClientID =  "38768d12-7769-4f73-a514-56e8118ecf9c"
$CertPath =  "C:\SelfSignedCertificate\TechPress.pfx"
$CertPass =   Read-Host -Prompt 'Enter Password of the PFX File' -AsSecureString
$SiteUrl  =  "https://jmitportfoliobi-admin.sharepoint.com/"
$tenant   =  "jmitportfoliobi.onmicrosoft.com"

$Params = @{
    ClientId            = $ClientID
    CertificatePath     = $CertPath
    CertificatePassword = $CertPass
    Url                 = $SiteUrl
    Tenant              = $tenant
}

Write-host "Connecting to PNPOnline" -ForegroundColor Blue -BackgroundColor White
Connect-PnPOnline @Params

$LogTime = Get-Date -Format "MM-dd-yyyy_hh-mm-ss"
$Logfile = "C:\Apps\Logs\M365GroupLog-$LogTime.csv"
$logfolder ="C:\Apps\Logs"
if(!(Test-Path -path $LogFolder)){
New-Item -ItemType Directory -path $logfolder
}
Else 
{
Write-Host "Great! log folder already exists, Please check C:\Apps\Log\ Folder for Log Files generated by this script"
}

Function LogWrite
{
    Param ([string]$logstring)

     Add-content $Logfile -value $logstring
}

Import-Csv ${CSVFilePath} -Header displayname, nickname, description, Teams | Select-Object -Skip 1 | ForEach-Object{ 
                                                    $displayname = $_.displayname 
                                                    $nickname = $_.nickname
                                                    $description = $_.description
                                                    $Teams = $_.Teams

if (Get-PnPMicrosoft365Group -identity $displayname) {
       Write-verbose "M365 Group $displayname already exists" 
       LogWrite "$displayname * Already Exists"
}

Elseif ($Teams -eq 'N') {
         Write-verbose "Teams Column Value set to $Teams for $displayname" 
         Write-verbose "Creating M365 Group + SPO Site without connected Teams for $displayname" 
         New-PnPMicrosoft365Group -DisplayName $displayname -Description $description -MailNickname $nickname -Owners $arrayOfOwners -Members $arrayOfMembers -IsPrivate
         LogWrite "$displayname *  created without Teams Site"
}

else {
    Write-verbose "Teams Column Value set to $Teams for $displayname"
    Write-verbose "Creating M365 Group + SPO Site with connected Teams for $displayname" 
    New-PnPMicrosoft365Group -DisplayName $displayname -Description $description -MailNickname $nickname -Owners $arrayOfOwners -Members $arrayOfMembers -IsPrivate -CreateTeam  
    LogWrite "$displayname * created with Teams Site"
     }
  }
}





    
         



                   